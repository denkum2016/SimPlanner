(function() {
    'use strict';

    var serviceId = 'controller.abstract';
    angular.module('app').factory(serviceId,
        ['common', '$window', 'commonConfig', 'breeze', AbstractRepository]);

    function AbstractRepository(common, $window, commonConfig, breeze) {
        var confirmDiscardMsg = 'Are you sure you want to discard changes without saving?';

        //var provider = entityManagerFactory.manager;

        function Ctor(argObj /* controllerId, $scope, watchedEntityNames*/) {
            var vm = this;
            var hasAddedEntityPropertyChanged = false;

            var $on = argObj.$scope.$on.bind(argObj.$scope);
            var unwatchers = [$on('$destroy', destroy)];
            var watchedEntities =
                argObj.watchedEntityNames
                    ?Array.isArray(argObj.watchedEntityNames)
                        ? argObj.watchedEntityNames
                        : [argObj.watchedEntityNames]
                    :[];

            for (var i = 0; i < watchedEntities.length; i++) {
                watchedEntities[i] = watchedEntities[i].split(',');
            }

            if (argObj.$scope.asideInstance) {
                vm.close = modalClose;
            } else {
                unwatchers.push($on('$routeChangeStart', beforeRouteChange));
            }

            if (argObj.$watches) {unwatchers = unwatchers.concat(argObj.$watches);}
            $window.addEventListener("beforeunload", beforeUnload);

            vm.log = common.logger.getLogFn(argObj.controllerId);
            vm.disableSave = disableSave;
            vm.disableSaveInclChildren = disableSaveInclChildren;
            vm.sortOnOrderProperty = sortOnOrderProperty;

            function getWatched() {
                var returnVar = [];
                watchedEntities.forEach(function (el) {
                    var ent = vm[el[0]]; //todo if required allow for array of array
                    for (var i = 1; i < el.length; i++) {
                        if (!ent) { break; }
                        ent = ent[el[i]];
                    }
                    if (ent) {
                        if (ent.entityAspect) {
                            returnVar.push(ent);
                        } else if (ent.length && ent[0].entityAspect) {
                            returnVar = returnVar.concat(ent);
                        }
                    }
                });
                return returnVar;
            }

            function hasDataChangedInWatched() {
                return getWatched().filter(function (ent) {
                    switch (ent.entityAspect.entityState) {
                        case breeze.EntityState.Modified:
                        case breeze.EntityState.Deleted:
                            return true;
                        case breeze.EntityState.Added:
                            //single keys autogenerated
                            var isSingleKey = ent.entityType.keyProperties.length === 1;
                            return !ent.entityType.dataProperties.every(function (dp) {
                                return (isSingleKey && dp.isPartOfKey) || ent[dp.name] === dp.defaultValue;
                            });
                        default:
                            return false;
                    }
                });
            }

            function beforeUnload(e){
                if (hasDataChangedInWatched().length) {
                    e.returnValue = confirmDiscardMsg; // Gecko, Trident, Chrome 34+
                    return confirmDiscardMsg;          // Gecko, WebKit, Chrome <34
                }
            }

            function beforeRouteChange(e) {
                if (!e.defaultPrevented) {
                    var changed = hasDataChangedInWatched();
                    if (changed.length && !confirm(confirmDiscardMsg)) {
                        e.preventDefault();
                        common.$broadcast(commonConfig.config.controllerActivateSuccessEvent); //switch the spinner off
                    } else {
                        changed.forEach(function (ent) {
                            ent.entityAspect.rejectChanges();
                        });
                        
                        destroy({}); //note this will remove listeners on the hide event, but as the controller has a new controller injected ever time
                        //, this will do for now
                    }
                }
            }


            function destroy(e) {
                if (unwatchers && !e.defaultPrevented) {
                    $window.removeEventListener("beforeunload", beforeUnload);
                    unwatchers.forEach(function (unwatch) {
                        unwatch();
                    });
                    unwatchers = null;
                }
            }

            function disableSave(ent) {
                ent = ent || vm[argObj.watchedEntityName];
                if (ent && ent.entityAspect) {
                    return !ent.entityAspect.entityState.isAddedModifiedOrDeleted()
                        || ent.entityAspect.hasValidationErrors;
                }
                return true;
            }

            function disableSaveInclChildren() {
                var entArray = getWatched().map(function (el) {
                    return el.entityAspect;
                });
                return entArray.some(function (ea) {
                        return ea.isBeingSaved || ea.hasValidationErrors;
                    }) || !entArray.some(function (ea) {
                        return ea.entityState.isAddedModifiedOrDeleted();
                    });
            }


            function modalClose() {
                var evtArg = {
                    defaultPrevented: false,
                    preventDefault: function () {
                        this.defaultPrevented = true;
                    }
                };
                beforeRouteChange(evtArg);
                if (!evtArg.defaultPrevented) {
                    argObj.$scope.asideInstance.hide();
                    destroy(evtArg);
                }
            }

            function sortOnOrderProperty(a, b) {
                if (a.order > b.order) {
                    return 1;
                }
                if (a.order < b.order) {
                    return -1;
                }
                // a must be equal to b
                return 0;
            }
        }

        //no point instantiating above (as true factory method) as will only extend other methods
        Ctor /* .prototype */ = { 
            constructor: Ctor,
        };

        return Ctor;

        /* Implementation */
        /*
        function setIsPartialTrue(entities) {
            // call for all "partial queries"
            for (var i = entities.length; i--;) { entities[i].isPartial = true; }
            return entities;
        }
        */
    }
})();